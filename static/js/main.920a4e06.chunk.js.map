{"version":3,"sources":["shared/models/theme.enum.ts","context/app.context.tsx","components/navbar/navbar.component.tsx","components/add-todo/add-todo.component.tsx","components/todo-item/todo-item.component.tsx","components/todo/todo.component.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["Theme","state","isLightTheme","theme","Light","AppContext","createContext","toggleTheme","addTodo","s","AppContextProvider","setState","Dark","todo","console","log","Provider","value","this","props","children","Component","Navbar","Consumer","context","nextTheme","className","appName","onClick","AddTodo","input","React","createRef","onSubmit","e","preventDefault","current","htmlFor","type","name","ref","required","TodoItem","Todo","useState","id","toDos","setToDos","useContext","useEffect","map","toDo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.920a4e06.chunk.js","sourcesContent":["export enum Theme {\r\n  Light = 'Light',\r\n  Dark = 'Dark',\r\n}","import React, { Component, createContext } from 'react';\r\n\r\nimport { Theme } from 'shared/models/theme.enum';\r\n\r\nconst state = {\r\n  isLightTheme: true,\r\n  theme: Theme.Light,\r\n}\r\n\r\nconst methods = {\r\n  toggleTheme: () => { },\r\n  addTodo: (s: string) => { }\r\n}\r\n\r\nexport const AppContext = createContext({ ...state, ...methods });\r\n\r\nclass AppContextProvider extends Component {\r\n  state = state;\r\n\r\n  toggleTheme = () => {\r\n    this.setState({\r\n      isLightTheme: !this.state.isLightTheme,\r\n      theme: this.state.isLightTheme ? Theme.Dark : Theme.Light,\r\n    });\r\n  }\r\n\r\n  addTodo = (todo: string) => {\r\n    console.log(todo);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AppContext.Provider value={{ ...this.state, toggleTheme: this.toggleTheme, addTodo: this.addTodo }}>\r\n        {this.props.children}\r\n      </AppContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppContextProvider;\r\n","// Use Context in class component:\r\n\r\nimport React, { Component } from 'react';\r\n\r\nimport './navbar.component.scss';\r\n\r\nimport { AppContext } from 'context/app.context';\r\nimport { Theme } from 'shared/models/theme.enum';\r\n\r\ninterface NavbarProps {\r\n  appName: string;\r\n}\r\n\r\nclass Navbar extends Component<NavbarProps> {\r\n\r\n  render() {\r\n    return (\r\n      <AppContext.Consumer>{(context: any) => {\r\n        const { isLightTheme, toggleTheme, theme } = context;\r\n        const nextTheme = isLightTheme ? Theme.Dark : Theme.Light;\r\n\r\n        return (\r\n          <nav className={`Navbar ${theme}Theme`}>\r\n            <h1>{this.props.appName}</h1>\r\n            <ul className=\"Navbar-Menu\">\r\n              <li className=\"Navbar-MenuItem\">Home</li>\r\n              <li className=\"Navbar-MenuItem\">About</li>\r\n              <li className=\"Navbar-MenuItem\" onClick={toggleTheme}>{nextTheme} Theme</li>\r\n            </ul>\r\n          </nav>\r\n        )\r\n      }}</AppContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React, { FormEvent } from 'react';\r\n\r\nimport './add-todo.component.scss';\r\n\r\nimport { AppContext } from 'context/app.context';\r\n\r\nexport interface AddTodoProps {\r\n  addTodo: Function,\r\n}\r\n\r\nconst AddTodo: React.FC<AddTodoProps> = ({ addTodo }) => {\r\n  const input = React.createRef<HTMLInputElement>();\r\n\r\n  return (\r\n    <AppContext.Consumer>{(context: any) => {\r\n      const handleAddTodo = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        addTodo(input?.current?.value);\r\n      };\r\n\r\n      return (\r\n        <form onSubmit={handleAddTodo} >\r\n          <label htmlFor=\"\">Add new:</label>\r\n          <input type=\"text\" name=\"todo\" ref={input} required />\r\n          <input type=\"submit\" />\r\n        </form>\r\n      )\r\n    }}</AppContext.Consumer>\r\n  )\r\n}\r\n\r\nexport default AddTodo;","import React from 'react';\r\n\r\nimport './todo-item.component.scss';\r\nimport { ToDo } from 'shared/models/todo.model';\r\n\r\ninterface TodoItemProps {\r\n  todo: ToDo\r\n}\r\n\r\nconst TodoItem: React.FC<TodoItemProps> = ({ todo }) => {\r\n\r\n  return (<div className=\"TodoItem\">{todo.name}</div>);\r\n}\r\n\r\nexport default TodoItem;","// Use Context in functional component:\r\n\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { v4 as id } from 'uuid';\r\n\r\nimport './todo.component.scss';\r\n\r\nimport { ToDo } from 'shared/models/todo.model';\r\nimport AddTodo from 'components/add-todo/add-todo.component';\r\nimport { AppContext } from 'context/app.context';\r\nimport TodoItem from 'components/todo-item/todo-item.component';\r\n\r\nconst Todo = () => {\r\n  const [toDos, setToDos] = useState<ToDo[]>([\r\n    { id: '1', name: 'Wake up' },\r\n    { id: '2', name: 'Go to run' },\r\n    { id: '3', name: 'Take breakfast' },\r\n  ]);\r\n\r\n  const addToDo = (name: string) => {\r\n    setToDos([...toDos, { id: id(), name }]);\r\n  };\r\n\r\n  const { theme } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    console.log('UseEffect', toDos)\r\n  }, [toDos]);\r\n\r\n  return (\r\n    <div className={`Todo ${theme}Theme`}>\r\n      <ul className=\"Todo-List\">\r\n        {toDos.map((toDo: any) =>\r\n          <li key={toDo.id} className=\"Todo-ListItem\">\r\n            <TodoItem todo={toDo} />\r\n          </li>)\r\n        }\r\n      </ul>\r\n\r\n      <AddTodo addTodo={addToDo} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;","import React from 'react';\n\nimport AppContextProvider from 'context/app.context';\n\nimport Navbar from 'components/navbar/navbar.component';\nimport Todo from 'components/todo/todo.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppContextProvider>\n        <Navbar appName=\"Context API\" />\n        <Todo />\n      </AppContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport App from 'app';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}